// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid()) @db.Uuid
  email     String   @unique
  password  String
  role      Role     @default(USER)
  firstName String   @map("first_name")
  lastName  String   @map("last_name")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  profile   Profile?
  form      Form?
  community Community[]

  @@map("users")
}

model Profile {
  id     String  @id @default(uuid()) @db.Uuid
  userId String  @unique @map("user_id") @db.Uuid
  user   User    @relation(fields: [userId], references: [id])
  avatar String? @unique @db.Uuid
  age    Int?
  about  String?
  // subscriptions String[]
  // savedEvents   String[]       @map("saved_events")

  saverProfiles   ProfilePeople[] @relation("saverProfiles") // кто сохранил к себе профили
  savedByProfiles ProfilePeople[] @relation("savedByProfiles") // тот кто был сохранён другими профилями

  @@map("profiles")
}

model ProfilePeople {
  id          String       @id @default(uuid()) @db.Uuid
  userId      String       @map("user_id") @db.Uuid
  savedUserId String       @map("saved_user_id") @db.Uuid
  status      PeopleStatus

  saver Profile @relation("saverProfiles", fields: [userId], references: [userId]) // профиль-инициатор сохранения других пользователей
  saved Profile @relation("savedByProfiles", fields: [savedUserId], references: [userId]) // сохранённый профиль другими пользователями

  @@unique([userId, savedUserId], name: "userIdSavedUserId")
  @@map("profiles-people")
}

model Form {
  id           String       @id @default(uuid()) @db.Uuid
  userId       String       @unique @map("user_id") @db.Uuid
  birthday     DateTime
  gender       PeopleGender
  favoriteTime Json[]       @map("favorite_time")
  patronymic   String?
  phoneNumber  BigInt?      @map("phone_number")
  address      Json?
  institute    String?
  course       Int?
  direction    String?
  profession   String?
  freezeAt     DateTime?    @map("freeze_at")
  blockedAt    DateTime?    @map("blocked_at")

  user   User        @relation(fields: [userId], references: [id])
  models FormModel[] @relation("formModels")

  @@map("forms")
}

model FormModel {
  id        String        @id @default(uuid()) @db.Uuid
  userId    String        @map("user_id") @db.Uuid
  modelId   String        @map("model_id") @db.Uuid
  modelType FormModelType @map("model_type")

  form Form @relation("formModels", fields: [userId], references: [userId])

  @@unique([userId, modelId, modelType], name: "userIdModelIdType")
  @@map("forms-models")
}

model Community {
  id          String    @id @default(uuid()) @db.Uuid
  userId      String    @map("user_id") @db.Uuid
  title       String
  description String?
  avatar      String?
  priceList   Json?     @map("price_list")
  shedule     Json?
  blockedAt   DateTime? @map("blocked_at")
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")

  user   User    @relation(fields: [userId], references: [id])
  events Event[]

  @@map("communities")
}

model Event {
  id          String    @id @default(uuid()) @db.Uuid
  communityId String    @unique @map("community_id") @db.Uuid
  title       String
  date        DateTime
  place       String
  blockedAt   DateTime? @map("blocked_at")
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")

  community Community @relation(fields: [communityId], references: [id])

  @@map("events")
}

model Interest {
  id    String @id @default(uuid()) @db.Uuid
  title String
  area  String

  @@map("interests")
}

model Topic {
  id          String  @id @default(uuid()) @db.Uuid
  title       String
  description String?

  games Game[]

  @@map("topics")
}

model Game {
  id                 String  @id @default(uuid()) @db.Uuid
  topicId            String  @map("topic_id") @db.Uuid
  title              String
  description        String?
  numberParticipants Int
  age                Int

  topic Topic @relation(fields: [topicId], references: [id])

  @@map("games")
}

model File {
  id        String        @id @default(uuid()) @db.Uuid
  modelId   String        @map("model_id") @db.Uuid
  modelType FileModelType @map("model_type")
  fileName  String        @map("file_name")
  fileLink  String        @map("file_link")

  @@map("files")
}

enum Role {
  USER
  MANAGER
  ADMIN
}

enum PeopleStatus {
  SAVED
  FRIEND
}

enum PeopleGender {
  MALE
  FEMALE
}

enum FileModelType {
  AVATAR
  FORM // protect
  COMMUNITY
  EVENT
  CHAT // protect
  MESSAGE // protect
  FEEDBACK
}

enum FormModelType {
  INTEREST
  TOPIC
  GAME
  COMMUNITY
}
