generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String      @id @default(uuid()) @db.Uuid
  email     String      @unique
  role      Role        @default(USER)
  firstName String      @map("first_name")
  lastName  String      @map("last_name")
  createdAt DateTime    @default(now()) @map("created_at")
  password  String
  updatedAt DateTime    @updatedAt @map("updated_at")
  community Community[]
  form      Form?
  profile   Profile?

  @@map("users")
}

model Profile {
  id              String          @id @default(uuid()) @db.Uuid
  userId          String          @unique @map("user_id") @db.Uuid
  avatar          String?         @unique @db.Uuid
  about           String?
  age             Int?
  Form            Form?
  user            User            @relation(fields: [userId], references: [id])
  savedByProfiles ProfilePeople[] @relation("savedByProfiles")
  saverProfiles   ProfilePeople[] @relation("saverProfiles")

  @@map("profiles")
}

model ProfilePeople {
  id          String       @id @default(uuid()) @db.Uuid
  status      PeopleStatus
  savedUserId String       @map("saved_user_id") @db.Uuid
  userId      String       @map("user_id") @db.Uuid
  saved       Profile      @relation("savedByProfiles", fields: [savedUserId], references: [userId])
  saver       Profile      @relation("saverProfiles", fields: [userId], references: [userId])

  @@unique([userId, savedUserId], name: "userIdSavedUserId")
  @@map("profiles-people")
}

model Form {
  id           String       @id @default(uuid()) @db.Uuid
  userId       String       @unique @map("user_id") @db.Uuid
  gender       PeopleGender
  whatDays     WhatDays     @map("what_days")
  howOften     HowOften     @map("how_often")
  favoriteTime Json[]       @map("favorite_time")
  address      Json?
  institute    String?
  course       Int?
  direction    String?
  profession   String?
  blockedAt    DateTime?    @map("blocked_at")
  freezeAt     DateTime?    @map("freeze_at")
  birthday     DateTime
  patronymic   String?
  phoneNumber  Int?      @map("phone_number")
  profileId    String       @unique @map("profile_id") @db.Uuid
  profile      Profile      @relation(fields: [profileId], references: [id])
  user         User         @relation(fields: [userId], references: [id])
  models       FormModel[]  @relation("formModels")

  @@map("forms")
}

model FormModel {
  id        String        @id @default(uuid()) @db.Uuid
  userId    String        @map("user_id") @db.Uuid
  modelId   String        @map("model_id") @db.Uuid
  modelType FormModelType @map("model_type")
  form      Form          @relation("formModels", fields: [userId], references: [userId])

  @@unique([userId, modelId, modelType], name: "userIdModelIdType")
  @@map("forms-models")
}

model Community {
  id          String    @id @default(uuid()) @db.Uuid
  userId      String    @map("user_id") @db.Uuid
  title       String
  description String?
  avatar      String?
  priceList   Json?     @map("price_list")
  shedule     Json?
  blockedAt   DateTime? @map("blocked_at")
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  user        User      @relation(fields: [userId], references: [id])
  events      Event?
  communityTopics CommunityTopics[] @relation("communityTopics")

  @@map("communities")
}

model CommunityTopics {
  id          String    @id @default(uuid()) @db.Uuid
  communityId String    @map("community_id") @db.Uuid
  topicId     String    @map("topic_id") @db.Uuid
  community   Community @relation("communityTopics", fields: [communityId], references: [id])
  topic       Topic     @relation("topicCommunities", fields: [topicId], references: [id])

  @@unique([communityId, topicId], name: "communityIdTopicId")
  @@map("communities-topics")
}

model Event {
  id          String    @id @default(uuid()) @db.Uuid
  communityId String    @unique @map("community_id") @db.Uuid
  title       String
  date        DateTime
  place       String
  blockedAt   DateTime? @map("blocked_at")
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  community   Community @relation(fields: [communityId], references: [id])

  @@map("events")
}

model Interest {
  id    String @id @default(uuid()) @db.Uuid
  title String
  area  String

  @@map("interests")
}

model Topic {
  id          String  @id @default(uuid()) @db.Uuid
  title       String
  description String?
  games       Game[]
  communityTopics CommunityTopics[] @relation("topicCommunities")

  @@map("topics")
}

model Game {
  id                 String  @id @default(uuid()) @db.Uuid
  topicId            String  @map("topic_id") @db.Uuid
  title              String
  description        String?
  numberParticipants Int
  age                Int
  topic              Topic   @relation(fields: [topicId], references: [id])

  @@map("games")
}

model File {
  id        String        @id @default(uuid()) @db.Uuid
  modelId   String        @map("model_id") @db.Uuid
  fileName  String        @map("file_name")
  fileLink  String        @map("file_link")
  modelType FileModelType @map("model_type")

  @@map("files")
}

enum Role {
  USER
  MANAGER
  ADMIN
}

enum PeopleStatus {
  SAVED
  FRIEND
}

enum PeopleGender {
  MALE
  FEMALE
}

enum HowOften {
  TWICE_A_WEEK
  WEEKLY
  TWICE_A_MONTH
  MONTHLY
}

enum WhatDays {
  WORKING
  WEEKENDS
  WORKING_WEEKENDS
}

enum FileModelType {
  AVATAR
  FORM
  COMMUNITY
  EVENT
  CHAT
  MESSAGE
  FEEDBACK
}

enum FormModelType {
  INTEREST
  TOPIC
  GAME
  COMMUNITY
}
